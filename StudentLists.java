import java.io.BufferedWriter;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.table.DefaultTableModel;
import java.util.Set;
import java.util.HashSet;

/**
 *
 * @author Prince
 */
public class StudentLists extends javax.swing.JFrame {

    /**
     * Creates new form StudentLists
     */
    public StudentLists() {
        initComponents();
        loadStudentsFromFile();
        createStudentGradesFile();
        saveStudentGrades();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        BannerLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        student_list = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        IDFIELD = new javax.swing.JTextField();
        FNFIELD = new javax.swing.JTextField();
        LNAMEFIELD = new javax.swing.JTextField();
        AGEFIELD = new javax.swing.JTextField();
        ADDBUTTON = new javax.swing.JButton();
        DELETEBUTTON = new javax.swing.JButton();
        backbutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(114, 193, 91));

        BannerLabel.setFont(new java.awt.Font("Goudy Old Style", 1, 36)); // NOI18N
        BannerLabel.setForeground(new java.awt.Color(242, 242, 242));
        BannerLabel.setText("Student Lists");

        jPanel2.setBackground(new java.awt.Color(160, 214, 131));

        student_list.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Number", "First Name", "Last Name", "Age"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(student_list);
        if (student_list.getColumnModel().getColumnCount() > 0) {
            student_list.getColumnModel().getColumn(0).setResizable(false);
            student_list.getColumnModel().getColumn(1).setResizable(false);
            student_list.getColumnModel().getColumn(2).setResizable(false);
            student_list.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Cambria", 1, 16)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(242, 242, 242));
        jLabel1.setText("STUDENT NUMBER:");

        jLabel2.setFont(new java.awt.Font("Cambria", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(242, 242, 242));
        jLabel2.setText("FIRST NAME:");

        jLabel3.setFont(new java.awt.Font("Cambria", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(242, 242, 242));
        jLabel3.setText("LAST NAME:");

        jLabel4.setFont(new java.awt.Font("Cambria", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(242, 242, 242));
        jLabel4.setText("AGE:");

        IDFIELD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDFIELDActionPerformed(evt);
            }
        });

        ADDBUTTON.setBackground(new java.awt.Color(114, 193, 91));
        ADDBUTTON.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        ADDBUTTON.setForeground(new java.awt.Color(242, 242, 242));
        ADDBUTTON.setText("ADD STUDENT");
        ADDBUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ADDBUTTONActionPerformed(evt);
            }
        });

        DELETEBUTTON.setBackground(new java.awt.Color(114, 193, 91));
        DELETEBUTTON.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        DELETEBUTTON.setForeground(new java.awt.Color(242, 242, 242));
        DELETEBUTTON.setText("DELETE STUDENT");
        DELETEBUTTON.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEBUTTONActionPerformed(evt);
            }
        });

        backbutton.setBackground(new java.awt.Color(114, 193, 91));
        backbutton.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        backbutton.setForeground(new java.awt.Color(242, 242, 242));
        backbutton.setText("BACK");
        backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbuttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(54, 54, 54)
                        .addComponent(FNFIELD, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IDFIELD))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(61, 61, 61)
                        .addComponent(LNAMEFIELD))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(117, 117, 117)
                        .addComponent(AGEFIELD))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(backbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DELETEBUTTON, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ADDBUTTON, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(IDFIELD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(FNFIELD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(LNAMEFIELD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(AGEFIELD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(ADDBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(DELETEBUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addComponent(backbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(BannerLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BannerLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Create a student list txt file if it doesnt exist
    private void createStudentFile() {
        File file = new File("StudentList.txt");
        if (!file.exists()) {
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                // You can add headers or default data if needed, otherwise leave empty
                writer.write("Student Number,First Name,Last Name,Age\n"); // Optional headers
                writer.close();
                System.out.println("StudentList.txt created.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
    // Load the datas inside the student list txt file
    private void loadStudentsFromFile() {
        createStudentFile(); // Ensures the file exists before loading
        try (BufferedReader br = new BufferedReader(new FileReader("StudentList.txt"))) {
            String line;
            DefaultTableModel model = (DefaultTableModel) student_list.getModel();

            model.setRowCount(0);

            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");

                if (!line.startsWith("Student Number")) {
                    model.addRow(data);
                }
            }
            System.out.println("Student data loaded.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }


    
    // Saves students data after clicking add student
    private void saveStudentsToFile() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("StudentList.txt"))) {
            DefaultTableModel model = (DefaultTableModel) student_list.getModel();
    
            bw.write("Student Number,First Name,Last Name,Age");
            bw.newLine();
    
            for (int i = 0; i < model.getRowCount(); i++) {
                String studentNumber = model.getValueAt(i, 0).toString();
                String firstName = model.getValueAt(i, 1).toString();
                String lastName = model.getValueAt(i, 2).toString();
                String age = model.getValueAt(i, 3).toString();
                bw.write(studentNumber + "," + firstName + "," + lastName + "," + age);
                bw.newLine();
            }
            System.out.println("Student data saved.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Create student grades txt file if theres none
    private void createStudentGradesFile() {
        File gradesFile = new File("StudentGrades.txt");
        File studentsFile = new File("StudentList.txt");

        if (!gradesFile.exists() && studentsFile.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(studentsFile));
                BufferedWriter bw = new BufferedWriter(new FileWriter(gradesFile))) {

                String line;
                br.readLine();

                while ((line = br.readLine()) != null) {
                    String[] data = line.split(",");
                    
                    // Ensure that the line has enough data (Student Number, First Name, Last Name, Age)
                    if (data.length >= 3) {
                        String firstName = data[1].trim();
                        String lastName = data[2].trim();
                        
                        //default grades
                        bw.write(firstName + " " + lastName + ",0,0,0,0");
                        bw.newLine();
                    }
                }

                System.out.println("StudentGrades.txt created with default grades.");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }


    // Save student names from StudentList.txt to StudentGrades.txt with default grades of 0s if they don't exist
    private void saveStudentGrades() {
        File gradesFile = new File("StudentGrades.txt");
        File studentsFile = new File("StudentList.txt");

        Set<String> existingStudents = new HashSet<>();

        if (gradesFile.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(gradesFile))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] data = line.split(",");
                    if (data.length >= 1) {
                        existingStudents.add(data[0].trim());
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        // Ensure StudentList.txt exists before trying to save
        if (studentsFile.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(studentsFile));
                 BufferedWriter bw = new BufferedWriter(new FileWriter(gradesFile, true))) {

                String line;
                br.readLine();

                // Reads each student from StudentList.txt and add them to StudentGrades.txt with default grades if not present
                while ((line = br.readLine()) != null) {
                    String[] data = line.split(",");

                    // Ensures the line has enough data (Student Number, First Name, Last Name)
                    if (data.length >= 3) {
                        String firstName = data[1].trim();
                        String lastName = data[2].trim();
                        String fullName = firstName + " " + lastName;

                        // Check if the student already exists in StudentGrades.txt
                        if (!existingStudents.contains(fullName)) {
                            
                            // Write to StudentGrades.txt with default grades
                            bw.write(fullName + ",0,0,0,0");
                            bw.newLine();
                            System.out.println("Added " + fullName + " with default grades to StudentGrades.txt");
                        }
                    }
                }

            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("StudentList.txt does not exist, cannot save grades.");
        }
    }

    
    private void IDFIELDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDFIELDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDFIELDActionPerformed

    private void backbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbuttonActionPerformed
        MainBoard mainb = new MainBoard();
        setVisible(false);
        mainb.setVisible(true);
    }//GEN-LAST:event_backbuttonActionPerformed

    private void ADDBUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ADDBUTTONActionPerformed
        String studentNumber = IDFIELD.getText();
        String firstName = FNFIELD.getText();
        String lastName = LNAMEFIELD.getText();
        String age = AGEFIELD.getText();
    
        if(studentNumber.isEmpty() || firstName.isEmpty() || lastName.isEmpty() || age.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Please fill in all fields.");
            return;
        }
        
        javax.swing.table.DefaultTableModel model = (javax.swing.table.DefaultTableModel) student_list.getModel();
        model.addRow(new Object[]{studentNumber, firstName, lastName, age});
        
        // Clear input fields after adding the student
        IDFIELD.setText("");
        FNFIELD.setText("");
        LNAMEFIELD.setText("");
        AGEFIELD.setText("");
        
        // Save the updated list to file
        saveStudentsToFile();
        saveStudentGrades();
    }//GEN-LAST:event_ADDBUTTONActionPerformed

    //Remove student data
    private void DELETEBUTTONActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEBUTTONActionPerformed
        int selectedRow = student_list.getSelectedRow();
        if (selectedRow >= 0) {
            String firstName = student_list.getValueAt(selectedRow, 1).toString();
            String lastName = student_list.getValueAt(selectedRow, 2).toString();

            // Remove data  from StudentList.txt
            removeStudentFromFile("StudentList.txt", student_list.getValueAt(selectedRow, 0).toString());

            // Remove data from StudentGrades.txt
            removeStudentFromGrades("StudentGrades.txt", firstName, lastName);

            // Remove data from JTable
            DefaultTableModel model = (DefaultTableModel) student_list.getModel();
            model.removeRow(selectedRow);
            
            javax.swing.JOptionPane.showMessageDialog(this, "Student deleted successfully.", "Success", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "No student selected.", "Error", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            System.out.println("No student selected for deletion.");
        }
    }//GEN-LAST:event_DELETEBUTTONActionPerformed

    
    private void removeStudentFromFile(String filename, String studentNumber) {
        File file = new File(filename);
        File tempFile = new File("tempFile.txt");

        try (BufferedReader reader = new BufferedReader(new FileReader(file));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            while ((line = reader.readLine()) != null) {
                // Skip the line that matches the student number
                if (!line.startsWith(studentNumber)) {
                    writer.write(line);
                    writer.newLine();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Rename the temp file to original file
        if (!file.delete()) {
            System.out.println("Could not delete the file");
        }
        if (!tempFile.renameTo(file)) {
            System.out.println("Could not rename the file");
        }
    }
    
    
    private void removeStudentFromGrades(String filename, String firstName, String lastName) {
        File file = new File(filename);
        File tempFile = new File("tempGradesFile.txt");

        String fullName = firstName + " " + lastName;

        try (BufferedReader reader = new BufferedReader(new FileReader(file));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            while ((line = reader.readLine()) != null) {
                if (!line.startsWith(fullName)) {
                    writer.write(line);
                    writer.newLine();
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Rename the temp file to original file
        if (!file.delete()) {
            System.out.println("Could not delete the file");
        }
        if (!tempFile.renameTo(file)) {
            System.out.println("Could not rename the file");
        }
    }


    
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentLists.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentLists.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentLists.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentLists.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentLists().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ADDBUTTON;
    private javax.swing.JTextField AGEFIELD;
    private javax.swing.JLabel BannerLabel;
    private javax.swing.JButton DELETEBUTTON;
    private javax.swing.JTextField FNFIELD;
    private javax.swing.JTextField IDFIELD;
    private javax.swing.JTextField LNAMEFIELD;
    private javax.swing.JButton backbutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable student_list;
    // End of variables declaration//GEN-END:variables
}
